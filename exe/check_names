#!/usr/bin/env ruby

# Check: Does a gem name exist
# Usage:
#   check_names <name>

# Where to check:
# 1. Does a Rubygem of this name already exist?
# 2. Does a Github repository of mine with this name already exist?
# 3. Does an executable with this name already exist?
# 4. Does an alias with this name already exist?
# 5. Does a function with this name already exist?

require 'optimist'
require_relative '../lib/check_names/version'
require_relative '../lib/check_names'

BANNER = <<-BANNER_TEXT
#{File.basename(__FILE__)}:
ersion #{CheckNames.version}

Check whether a proposed gem name already exists

Usage:
  #{File.basename(__FILE__)} OPTIONS NAME...


check_names looks to see whether the names provided are already in use.
It outputs the usage (if any) of each name on $STDOUT. It exits with a 
zero return code if none of the names are already in use. Otherwise it 
exits with return code 1. 

check_names checks for each of the following uses:

-  The name of a Ruby standard class
-  The name of a gem on RubyGems
-  The name of one of your Github repositories
-  The name of a sehll alias
-  The name of a shell function
-  The name of an executable (reachable via \$PATH)

The following options are allowed:
BANNER_TEXT

def main
  opts = Optimist.options do
    version CheckNames.version
    banner BANNER
    opt :all, "Check for all possible uses. (Default is to stop at the first one found.)", default: false
    educate_on_error
  end

  all = opts[:all]
  args = ARGV
  args = args.map { |arg| arg.downcase }

  if args.size == 0
    Optimist.educate
    exit
  end

  rc = 0
  args.each.with_index(0) do |arg, i|
    print "#{arg}: "
    checks_printed_count = 0
    (1...(CheckNames.check_methods.size)).each do |check|
      result = CheckNames.check_name(check, arg)
      if result[:result]
        print ", " if checks_printed_count > 0
        print result[:description]
        checks_printed_count += 1
      end
      if checks_printed_count > 0
        rc = 1
        break unless all
      end
    end
    print CheckNames.check_method(0)[:description] unless checks_printed_count > 0
    puts
  end
  exit(rc)
end

if __FILE__ == $0
  main
end