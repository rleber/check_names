#!/usr/bin/env ruby

# Check: Does a gem name exist
# Usage:
#   check_names <name>

# Where to check:
# 1. Does a Rubygem of this name already exist?
# 2. Does a Github repository of mine with this name already exist?
# 3. Does an executable with this name already exist?
# 4. Does an alias with this name already exist?
# 5. Does a function with this name already exist?

require_relative '../lib/check_names/version'
require_relative '../lib/check_names'

def show_help
  puts <<-HELP
check_names: Check whether a proposed gem name already exists
Version #{CheckNames.version}

Usage:
  check_names [OPTIONS]... [names]...

check_names looks to see whether the names provided are already in use.
It outputs the usage (if any) of each name on $STDOUT. It exits with a 
zero return code if none of the names are already in use. Otherwise it 
exits with return code 1. 

check_names checks for each of the following uses:

-  The name of a Ruby standard class
-  The name of a gem on RubyGems
-  The name of one of your Github repositories
-  The name of a sehll alias
-  The name of a shell function
-  The name of an executable (reachable via \$PATH)

The following options are available:

--help  -h  Print this help information
--all   -a  Report all uses of the name. (Otherwise, check_names stops at 
            the first use it finds.)
  HELP
end

def main(args)
  args = args.map { |arg| arg.downcase }
  all = args.index { |arg| %w{-a --all}.include?(arg) }
  args.delete_at(all) if all
  if args.size == 0 || %w{-h --help help}.include?(args.first)
    show_help
    exit
  end

  rc = 0
  args.each.with_index(0) do |arg, i|
    results = []
    print "#{arg}: "
    checks_printed_count = 0
    (1...(CheckNames.check_methods.size)).each do |check|
      result = CheckNames.check_name(check, arg)
      if result[:result]
        print ", " if checks_printed_count > 0
        print result[:description]
        checks_printed_count += 1
      end
      if checks_printed_count > 0
        rc = 1
        break unless all
      end
    end
    print CheckNames.check_method(0)[:description] unless checks_printed_count > 0
    puts
  end
  exit(rc)
end

if __FILE__ == $0
  main(ARGV)
end