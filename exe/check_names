#!/usr/bin/env ruby

# Check: Does a gem name exist
# Usage:
#   check_names <name>

# Where to check:
# 1. Does a Rubygem of this name already exist?
# 2. Does a Github repository of mine with this name already exist?
# 3. Does an executable with this name already exist?
# 4. Does an alias with this name already exist?
# 5. Does a function with this name already exist?

require_relative '../lib/check_names/version'
require_relative '../lib/check_names'

def show_help
  puts <<-HELP
check_names: Check whether a proposed gem name already exists
Version #{CheckNames.version}

Usage:
  check_names [OPTIONS]... [names]...

check_names exits with a zero return code (success) if no conflicting gem
name exists. Otherwise it exits with a non-zero return code, with one 
of the following meanings:

1  A gem exists on Rubygems with this name
2  You have a github repository of this name
3  You have an executable (reachable via \$PATH) with this name
4  You have a shell function with this name
5  You have an alias with this name
6  This name is used by a Ruby standard class

If more than one name was given, the return code is the maximum return code
received for any name.

The following options are available:

--help  -h  Print this help information
--quiet -q  Suppress messages about the status of the name check
--all   -a  Normally, check_names stops at the first use it finds.
            With --all, it checks and reports every use
  HELP
end

def main(args)
  args = args.map { |arg| arg.downcase }
  quiet = args.index { |arg| %w{-q --quiet}.include?(arg) }
  args.delete_at(quiet) if quiet
  all = args.index { |arg| %w{-a --all}.include?(arg) }
  args.delete_at(all) if all
  if args.size == 0 || %w{-h --help help}.include?(args.first)
    show_help
    exit
  end

  if all
    results = GemName.check_names_all(*args)
  else
    results = GemName.check_names(*args)
  end
  
  rc = 0

  types = []
  results.each.with_index(1) do |result, count|
    types << result[:description] if result[:result]
    rc = result[:check] if result[:check] > rc
    if count >= results.size || results[count][:name] != result[:name]
      unless quiet
        types << "Unused" if types.size == 0
        puts "#{result[:name]}: #{types.join(', ')}"
      end
      types = []
    end
  end
  rc = 1 if rc > 0 && (all || args.size > 1)
  exit(rc)
end

if __FILE__ == $0
  main(ARGV)
end